
SAMPLES =['BM_WT_pBM5_1_S29', 'BM_WT_pBM5_2_S30', 'BM_WT_pBM5_3_S31',
          'BM_WT_pBM766_1_S32','BM_WT_pBM766_2_S33','BM_WT_pBM766_3_S34',
          'BM_csl4ph_pBM5_1_S35','BM_csl4ph_pBM5_2_S36','BM_csl4ph_pBM5_3_S37',
          'BM_csl4ph_pBM766_1_S38','BM_csl4ph_pBM766_2_S39','BM_csl4ph_pBM766_3_S40',
          'BM_enp1_1_pBM5_1_S41','BM_enp1_1_pBM5_2_S42','BM_enp1_1_pBM5_3_S43',
          'BM_enp1_1_pBM766_1_S44','BM_enp1_1_pBM766_2_S45','BM_enp1_1_pBM766_3_S46']


rule all:
    input:
        "outputs/deseq2/res_wt_sig.csv",
        "outputs/deseq2/res_csl4_sig.csv",
        "outputs/deseq2/res_enp1_sig.csv",
        "outputs/deseq2/res_wt.csv",
        "outputs/deseq2/res_csl4.csv",
        "outputs/deseq2/res_enp1.csv"

##################################
## PREPROCESSING
##################################

rule first_12_qc:
    output: 'outputs/quality/{sample}.trim.fq.gz'
    input: 'inputs/raw/{sample}_L002_R1_001.fastq.gz'
    conda: 'preprocessing.yml'
    shell:''' 
    trimmomatic SE {input} {output} LEADING:12
    '''
    
rule bbduk_qc:
    output: 'outputs/quality/{sample}.trimbb.fq.gz'
    input:
        fq = 'outputs/quality/{sample}.trim.fq.gz',
        polyA = 'inputs/polyA.fa.gz',
        truseqr = 'inputs/truseq_rna.fa.gz',
        truseq = 'inputs/truseq.fa.gz'
    conda: 'preprocessing.yml'
    shell:'''
    bbduk.sh in={input.fq} out={output} ref={input.polyA},{input.truseq} k=13 ktrim=r useshortkmers=t mink=5 qtrim=r trimq=10 minlength=20
    '''

##################################
## QUANTIFICATION
##################################

#rule download_transcriptome:
#    output: 'inputs/r64/GCA_000146045.2_R64_rna_from_genomic.fna.gz'
#    shell:'''
#    curl -L -o {output} ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/146/045/GCA_000146045.2_R64/GCA_000146045.2_R64_rna_from_genomic.fna.gz
#    '''

rule index_transcriptome:
    output: directory('inputs/all_transcript1_index')
    input: 'inputs/all_transcript1.gz'
    conda: 'salmon.yml'
    shell:'''
    salmon index -t {input} -i {output}
    '''

rule salmon:
    output: 'outputs/quant/{sample}_quant/quant.sf',
    input:
        fq = 'outputs/quality/{sample}.trimbb.fq.gz',
        indx = directory('inputs/all_transcript1_index')
    conda: 'salmon.yml'
    params: outdir = "outputs/quant/{sample}_quant/"
    shell:'''
    salmon quant -i {input.indx} -l A -r {input.fq} -o {params.outdir}
    '''

#####################################
## DIFFERENTIAL EXPRESSION
#####################################

rule make_counts:
    output: counts = "outputs/counts/tag_seq_counts.csv"
    input: 
        expand("outputs/quant/{sample}_quant/quant.sf", sample = SAMPLES),
        samples = "inputs/samples.csv",
        tx2gene = "inputs/yeast_tx2gene.csv"
    conda: "diffex.yml" 
    script: "scripts/make_counts.R"

rule deseq2:
    output:
        wt = "outputs/deseq2/res_wt.csv",
        csl4 = "outputs/deseq2/res_csl4.csv",
        enp1 = "outputs/deseq2/res_enp1.csv",
        wt_sig = "outputs/deseq2/res_wt_sig.csv",
        csl4_sig = "outputs/deseq2/res_csl4_sig.csv",
        enp1_sig = "outputs/deseq2/res_enp1_sig.csv"
    input: 
         counts = "outputs/counts/tag_seq_counts.csv",
         samples = "inputs/samples.csv"
    #conda: "diffex.yml"
    script: "scripts/deseq2.R"

#####################################
## DEEPTOOLS
#####################################
